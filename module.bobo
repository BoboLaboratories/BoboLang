import a.b.c
import io.net
import math.pow

private const g0 = __get_so_pipe()

private const g1 = g0

private var a
var b = h
private var c

private fun move(const x, y = x(y, z(a, b(), c(d(e)))), offset = o) {
    var a
    a = b

    http_send()
}

native fun main(x)

private fun send(a, b, c, d = r, k = f) {
    y = t
}

native fun __get_so_pipe(t)

private native fun println(x, y = t)

/*

    fun range(begin, end, step ?= null) {
        const type = typeof(begin)

        check {
            type != typeof(end)                       -> // error
            step != null && (type != typeof(step))    -> // error
        }

        (step == null) -> match (type) {
            :int    -> step = 1
            :double -> step = 1.0
            _       -> error("unsupported range type #{type}")
        }
    }

    // check construct
    check {
        n == 0 -> io.println("zero")
        n < 0  -> io.println("negative")
        true   -> io.println("positive")
    }

    // foreach
    for (elem : list) {
        io.println(elem)
    }

*/